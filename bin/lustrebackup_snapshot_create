#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# --- BEGIN_HEADER ---
#
# lustrebackup_snapshot_create - lustre snapshot create program
# Copyright (C) 2020-2024  The lustrebackup Project by the Science HPC Center at UCPH
#
# This file is part of lustrebackup.
#
# lustrebackup is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# lustrebackup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# -- END_HEADER ---
#

"""Create snapshot and add it to snapshots pickle"""

from __future__ import print_function

import sys
import getopt

from lustrebackup.shared.base import print_stderr
from lustrebackup.shared.configuration import get_configuration_object
from lustrebackup.snapshot.client import create_snapshots_dict
from lustrebackup.snapshot.mgs import create_snapshot


def usage(name=sys.argv[0]):
    """Usage help"""
    print_stderr("""Usage:
%(name)s [OPTIONS]
Where OPTIONS may be one or more of:
   -h|--help                    Show this help
   -v|--verbose                 Verbose output
   -t|--target                  target snapshot (default source)
   -c PATH|--config=PATH        Path to config file

""" % {'name': name})


def main():
    """Create lustre snapshot and add it to snapshots pickle"""
    conf_file = "/etc/lustrebackup.conf"
    verbose = False
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hvc:t:",
                                   ["help",
                                    "verbose",
                                    "config=",
                                    "timestamp="])
        for opt, arg in opts:
            if opt in ("-h", "--help"):
                usage()
                return 1
            elif opt in ("-v", "--verbose"):
                verbose = True
            elif opt in ("-c", "--config"):
                conf_file = arg
    except Exception as err:
        print_stderr(err)
        usage()
        return 1

    configuration = get_configuration_object(conf_file=conf_file,
                                             verbose=verbose)
    if not configuration:
        print_stderr("Failed to start %r with config: %r"
                     % (sys.argv[0], conf_file))
        return 1

    logger = configuration.logger
    msg = "Starting %r with config: %r for %r" \
        % (sys.argv[0], conf_file, configuration.lustre_fsname,)
    logger.info(msg)
    if verbose:
        print_stderr(msg)

    retval = 0
    timestamp = create_snapshot(configuration, verbose=verbose)
    if timestamp is None:
        retval = 1
        msg = "Failed to create new snapshot for %r" \
            % configuration.lustre_fsname
        logger.error(msg)
        if verbose:
            print_stderr("ERROR: %s" % msg)
    else:
        msg = "Created %r snapshot with timestamp: %d" \
            % (configuration.lustre_fsname,
               timestamp)
        logger.info(msg)
        if verbose:
            print_stderr(msg)

    if retval == 0:
        snapshots_dict_filepath \
            = create_snapshots_dict(configuration,
                                    timestamp=timestamp,
                                    verbose=verbose)
        if snapshots_dict_filepath:
            msg = "Created %r snapshots info: %r" \
                % (configuration.lustre_fsname,
                   snapshots_dict_filepath)
            logger.info(msg)
            if verbose:
                print_stderr(msg)
        else:
            retval = 1
            msg = "Falied to create %r snapshots info" \
                % configuration.lustre_fsname
            logger.error(msg)
            if verbose:
                print_stderr("ERROR: %s" % msg)

    return retval


if __name__ == "__main__":
    retval = main()
    sys.exit(retval)
