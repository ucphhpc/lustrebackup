#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# --- BEGIN_HEADER ---
#
# lustrebackup_target_filediff - lustre target filediff backup program
# Copyright (C) 2020-2024  The lustrebackup Project by the Science HPC Center at UCPH
#
# This file is part of lustrebackup.
#
# lustrebackup is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# lustrebackup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# -- END_HEADER ---
#

"""This program sends a stream of xxh128 checksums from the backup target file
and send them to the remote side (lustre_backup_source_filediff) on stdin.
The remote side compares these checksums and responds with blockumbers and
potential diff data on stdout.
NOTE: Files must have same size on source and target
"""

import os
import sys
import time
import traceback
import subprocess
import shlex
import tempfile
import multiprocessing
import getopt
import ctypes
import math
import urllib.parse
from threading import Thread
import xxhash

from lustrebackup.shared.base import print_stderr, force_unicode
from lustrebackup.shared.configuration import get_configuration_object
from lustrebackup.shared.defaults import rsync_opts_modified, \
    bin_source_filediff
from lustrebackup.shared.fileio import copyattr
from lustrebackup.shared.shell import shellexec


def __checksum_producer(fifo_checksum_filepath,
                        local_filepath,
                        previous_checksum_filepath,
                        xxh128_checksum_size,
                        headersize,
                        blocksize,
                        offset_block,
                        end_block,
                        verbose):
    try:
        pid = os.getpid()
        xxh128 = xxhash.xxh128()

        # Open checksum write pipe

        """
        print_stderr("%d: offset_block: %d, end_block: %d" \
            % (pid, offset_block, end_block))
        print_stderr("%d: Wating for checksum write pipe: %r" \
            % (pid, fifo_checksum_filepath))
        """

        checksum_write_fd = os.open(fifo_checksum_filepath, os.O_WRONLY)

        # print_stderr("%d: Got checksum write pipe: %r" \
        #    % (pid, fifo_checksum_filepath))

        if previous_checksum_filepath:
            # Read checksum form Checksum file
            fh_checksum = open(previous_checksum_filepath, 'rb')
            fh_checksum.seek(offset_block*xxh128_checksum_size)
            for blocknumber in range(offset_block, end_block):
                os.write(checksum_write_fd,
                         fh_checksum.read(xxh128_checksum_size))
            fh_checksum.close()
        else:
            # Checksum local data file
            xxh128 = xxhash.xxh128()
            fh_local = open(local_filepath, 'rb')
            fh_local.seek(offset_block*blocksize)
            for blocknumber in range(offset_block, end_block):
                xxh128.reset()
                xxh128.update(fh_local.read(blocksize))
                os.write(checksum_write_fd, xxh128.digest())
                # print("%d: blocknumber: %d, checksum: %s" \
                #    % (pid, blocknumber, xxh128.hexdigest()))
            fh_local.close()
        os.close(checksum_write_fd)
        if verbose:
            print("%d: Finished __checksum_producer with pipe: %r"
                  % (pid, fifo_checksum_filepath))

    except Exception as err:
        print_stderr(traceback.format_exc())


def __transfer(result,
               remote,
               fh_local,
               fh_checksum,
               pipe_checksum_read,
               xxh128_checksum_size,
               filesize,
               headersize,
               blocksize,
               blockcount,
               local_attr_filepath,
               ):
    try:
        max_block_number = (1 << (headersize*8))-1
        result['updated_blocks'] = 0
        blocknumber = 0
        # TODO: Find another way to determine if remote process is active ?
        #       https://stackoverflow.com/questions/13298592/why-does-popen-poll-return-a-return-code-of-none-even-though-the-sub-process-h
        while remote.poll() is None and blocknumber < blockcount:
            # print_stderr("Waiting for blocknumber: %d/%d" \
            #    % (blocknumber, blockcount))
            missing_bytes = xxh128_checksum_size
            checksum = b''
            while missing_bytes > 0:
                checksum += pipe_checksum_read.read(missing_bytes)
                missing_bytes = xxh128_checksum_size - len(checksum)
            remote.stdin.write(checksum)
            remote.stdin.flush()
            # print_stderr("Send xxh128 for blocknumber: %d" % blocknumber)
            missing_bytes = headersize
            recv_blocknumber_raw = b''
            while missing_bytes > 0:
                recv_blocknumber_raw += remote.stdout.read(missing_bytes)
                missing_bytes = headersize - len(recv_blocknumber_raw)
            # print_stderr("recv recv_blocknumber_raw: %s" \
            #               % recv_blocknumber_raw)
            recv_blocknumber = int.from_bytes(
                recv_blocknumber_raw, sys.byteorder)
            # print_stderr("recv blocknumber: %d" % blocknumber)
            # NOTE: recv_blocknumber == max_block_number:
            # 1) Is send from remote process if local
            #    and remote checksums match
            # 2) Is send from __subprocess_wait if process terminated
            #    and we are waiting for input
            if recv_blocknumber != max_block_number:
                # Save data
                offset = recv_blocknumber * blocksize
                fh_local.seek(offset)
                recv_blocksize = min(blocksize, filesize-offset)
                missing_bytes = recv_blocksize
                while missing_bytes > 0:
                    # print_stderr("Waiting for %d bytes for block: %d" \
                    #    % (missing_bytes, recv_blocknumber))
                    # print_stderr("before write pos: %d" % fh_local.tell())
                    fh_local.write(remote.stdout.read(missing_bytes))
                    # print_stderr("after write pos: %d" % fh_local.tell())
                    missing_bytes = recv_blocksize - (fh_local.tell() - offset)
                result['updated_blocks'] += 1

            # Save checksum

            missing_bytes = xxh128_checksum_size
            checksum = b''
            while missing_bytes > 0:
                checksum = remote.stdout.read(missing_bytes)
                fh_checksum.write(checksum)
                missing_bytes = xxh128_checksum_size - len(checksum)
            blocknumber += 1

        if local_attr_filepath:
            result['remote_attr_filepath'] \
                = force_unicode(remote.stdout.readline())
    except Exception as err:
        result['rc'] = 1
        result['error'] = err

    return result


def __set_attributes(configuration,
                     ssh_options,
                     local_filepath,
                     local_attr_filepath,
                     remote_attr_filepath,
                     verbose):
    """Fetch attr and xattr from *remote_attr_filepath*
    and apply it to *local_filepath*
    NOTE: local_attr_filepath must be on lustre
          to ensure attr / xattr consistency
    """
    # TODO: use ssh_options for multiplexing
    logger = configuration.logger
    command = "%s %s %s:%r %r" \
        % (configuration.backup_rsync_command,
           rsync_opts_modified,
           configuration.source_host,
           remote_attr_filepath,
           local_attr_filepath)
    msg = "local_attr_filepath: %s" % local_attr_filepath
    logger.info(msg)
    if verbose:
        print(msg)
    (rc, stdout, stderr) = shellexec(configuration,
                                     command)

    if rc != 0:
        msg = "__set_attributes failed: %s: %s" \
            % (command, stderr)
        logger.error(msg)
        if verbose:
            print_stderr("ERROR: %s" % msg)
        return False

    # Copy attributes

    status = copyattr(configuration, local_attr_filepath, local_filepath)

    return status


def main():
    """Start target filediff"""
    verbose = False
    disable_log = False
    local_attr_filepath = None
    headersize = 8
    xxh128_checksum_size = 16
    conf_file = "/etc/lustrebackup.conf"
    ssh_options = None
    blocksize = 1024**2
    offset_block = 0
    end_block = 0
    local_filesize = -1
    previous_checksum_filepath = None
    save_checksum_filepath = "/dev/null"
    local_filepath = None
    remote_filepath = None
    retval = 0

    try:
        usage = "USAGE: %s [-h|--help] [-v|--verbose] [-d|--disable-log]" \
            % sys.argv[0] \
            + " [-c FILEPATH|--config=FILEPATH]" \
            + " [-a FILEPATH|--attributes=FILEPATH]" \
            + " [-S SSH_OPTS|--ssh-options=SSH_OPTS]" \
            + " [-n SIZE|--headersize=SIZE]" \
            + " [-b SIZE|--blocksize]=SIZE" \
            + " [-o BLOCK|--offset=BLOCK]" \
            + " [-e BLOCK|--end=BLOCK]" \
            + " [-p FILEPATH|--previous-checksum]=FILEPATH" \
            + " [-s FILEPATH|--save-checksum]=FILEPATH" \
            + " [-l FILEPATH|--local]=FILEPATH" \
            + " [-r FILEPATH|--remote]=FILEPATH"
        opts, args = getopt.getopt(sys.argv[1:], "hvdc:a:S:n:b:o:e:p:s:l:r:", [
                                   "help",
                                   "verbose",
                                   "disable-log",
                                   "config=",
                                   "attributes=",
                                   "ssh-options=",
                                   "headersize=",
                                   "blocksize=",
                                   "offset=",
                                   "end=",
                                   "previous-checksum=",
                                   "save-checksum=",
                                   "local=",
                                   "remote="])
        for opt, arg in opts:
            if opt in ("-h", "--help"):
                print_stderr(usage)
                return 1
            elif opt in ("-v", "--verbose"):
                verbose = True
            elif opt in ("-d", "--disable-log"):
                disable_log = True
            elif opt in ("-c", "--config"):
                conf_file = arg
            elif opt in ("-a", "--attributes"):
                local_attr_filepath = arg
            elif opt in ("-S", "--ssh-options"):
                ssh_options = arg
            elif opt in ("-n", "--headersize"):
                headersize = int(arg)
            elif opt in ("-b", "--blocksize"):
                blocksize = int(arg)
            elif opt in ("-o", "--offset"):
                offset_block = int(arg)
            elif opt in ("-e", "--end"):
                end_block = int(arg)
            elif opt in ("-p", "--previous-checksum"):
                previous_checksum_filepath = arg
            elif opt in ("-s", "--save-checksum"):
                save_checksum_filepath = arg
            elif opt in ("-l", "--local"):
                local_filepath = arg
            elif opt in ("-r", "--remote"):
                remote_filepath = arg
        if local_filepath is None or remote_filepath is None:
            print_stderr(usage)
            return 1
    except Exception as err:
        print_stderr(err)
        print_stderr(usage)
        return 1

    configuration = get_configuration_object(conf_file=conf_file,
                                             skip_log=disable_log)

    if not configuration:
        print_stderr("Failed to start %r with config: %r"
                     % (sys.argv[0], conf_file))
        sys.exit(1)

    logger = configuration.logger
    msg = "Starting %r with verbose: %s, disable-log: %s" \
        % (sys.argv[0], verbose, disable_log) \
        + ", config: %r, local_attr_filepath: %s, ssh_options: %r" \
        % (conf_file, local_attr_filepath, ssh_options) \
        + ", headersize: %d, blocksize: %d, offset: %d, end: %d" \
        % (headersize, blocksize, offset_block, end_block) \
        + ", local_filepath: %r, remote_filepath: %r" \
        % (local_filepath, remote_filepath)
    logger.info(msg)
    if verbose:
        print(msg)

    # We do not want ssh compression

    if not ssh_options:
        ssh_options = "-o Compression=no"

    if not os.path.isfile(local_filepath):
        msg = "Missing target file: %r" % local_filepath
        logger.error(msg)
        if verbose:
            print_stderr("ERROR: %s" % msg)
        return 1

    if not os.path.isfile(local_filepath):
        msg = "Missing file: %r" % local_filepath
        logger.error(msg)
        if verbose:
            print_stderr("ERROR: %s" % msg)
        return 1

    local_filesize = os.path.getsize(local_filepath)
    max_end_block = math.ceil(local_filesize / blocksize)
    if end_block <= 0:
        end_block = max_end_block
    elif end_block > max_end_block:
        msg = "End block: %d exceeds max end block: %d" \
            % (end_block, max_end_block)
        logger.error(msg)
        if verbose:
            print_stderr("ERROR: %s" % msg)
        return 1

    blockcount = end_block - offset_block
    logger.debug("Using offset_block: %d" % offset_block)
    logger.debug("Using end_block: %d" % end_block)
    logger.debug("Using blockcount: %d" % blockcount)

    # If checksum file is provided check if its sound

    if previous_checksum_filepath:
        if not os.path.isfile(previous_checksum_filepath):
            msg = "Missing checksum file: %r" % previous_checksum_filepath
            logger.error(msg)
            if verbose:
                print_stderr("ERROR: %s" % msg)
            return 1
        checksum_filesize = os.path.getsize(previous_checksum_filepath)
        checksum_blockcount = checksum_filesize / xxh128_checksum_size
        if blockcount != checksum_blockcount:
            msg = "Checksum file: %r expected %d blocks, got :%d" \
                % (previous_checksum_filepath,
                   blockcount,
                   checksum_blockcount)
            logger.error(msg)
            if verbose:
                print_stderr("ERROR: %s" % msg)
            return 1

    # Create checksum worker and pipe checksums to main process

    t1 = time.time()
    nprocs = 1
    pool = multiprocessing.Pool(processes=nprocs)
    fifo_checksum_filepath = tempfile.mktemp()
    try:
        os.mkfifo(fifo_checksum_filepath)
    except OSError as err:
        msg = "Failed to create FIFO: %s" % err
        logger.error(msg)
        if verbose:
            print_stderr(msg)
        return 1

    # NOTE: Reader must be opened before writer

    checksum_producer = pool.apply_async(__checksum_producer,
                                         (fifo_checksum_filepath,
                                          local_filepath,
                                          previous_checksum_filepath,
                                          xxh128_checksum_size,
                                          headersize,
                                          blocksize,
                                          offset_block,
                                          end_block,
                                          verbose))

    # print_stderr("Wating for fifo checksum reader pipe: %r" \
    #    % fifo_checksum_filepath)

    pipe_checksum_read = open(fifo_checksum_filepath, "rb")

    # print_stderr("Got fifo checksum reader pipe: %r" \
    #     % fifo_checksum_filepath)

    # Open connection to remote file transfer

    ssh_command = "ssh %s %s" % \
        (ssh_options,
         configuration.source_host)
    command = bin_source_filediff
    if disable_log:
        command += " --disable-log"
    if local_attr_filepath:
        command += " --attributes"
    command += " --config=%s" % configuration.source_conf \
        + " --headersize=%d" % headersize \
        + " --blocksize=%d" % blocksize \
        + " --offset=%d" % offset_block \
        + " --end=%d" % end_block \
        + " --filesize=%d" % local_filesize \
        + " --filepath=%s" % urllib.parse.quote(remote_filepath)
    __args = shlex.split(ssh_command)
    __args.extend([command])
    if verbose:
        print(__args)
    remote = subprocess.Popen(__args,
                              stdin=subprocess.PIPE,
                              stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE)

    # Start receiver thread

    fh_local = open(local_filepath, 'rb+')
    fh_local.seek(offset_block*blocksize)
    fh_checksum = open(save_checksum_filepath, 'wb')
    fh_checksum.seek(offset_block*xxh128_checksum_size)

    receiver_result = {'rc': 0}
    receiver_thread = Thread(target=__transfer,
                             args=[receiver_result,
                                   remote,
                                   fh_local,
                                   fh_checksum,
                                   pipe_checksum_read,
                                   xxh128_checksum_size,
                                   local_filesize,
                                   headersize,
                                   blocksize,
                                   blockcount,
                                   local_attr_filepath,
                                   ])
    receiver_thread.start()

    # Wait for local thread

    receiver_thread.join()
    retval = receiver_result.get('rc', -1)
    if retval != 0:
        msg = "Receiver failed: rc: %d, error: %s" \
            % (retval,
               receiver_result.get('error', None))
        logger.error(msg)
        if verbose:
            print_stderr(msg)
        # Kill remote process
        remote.kill()

    # Wait for remote transfer to terminate

    msg = "Waiting for remote process to finish: %r" % remote_filepath
    logger.info(msg)
    if verbose:
        print(msg)
    remote_rc = remote.wait()
    # NOTE: If remote_stderr overflows then stream using:
    #       sys.stderr.buffer.write(remote.stderr.read())
    #       sys.stderr.buffer.flush()
    remote_stderr = force_unicode(remote.stderr.read())
    if remote_stderr:
        msg = "Remote stderr: %s" % remote_stderr
        logger.error(msg)
        if verbose:
            print_stderr(msg)

    msg = "Remote processed finised with rc: %d, %r" \
        % (remote_rc, remote_filepath)
    logger.info(msg)
    if verbose:
        print(msg)

    # Check local and remote status

    if remote_rc != 0:
        # If remote error terminate receiver thread
        retval = remote_rc
        msg = "Remote filediff failed: %r with rc: %d" \
            % (remote_filepath, remote_rc)
        logger.error(msg)
        if verbose:
            print_stderr("ERROR: %s" % msg)
        logger.debug("Terminating receiver thread")
        ctypes.pythonapi.PyThreadState_SetAsyncExc(
            ctypes.c_long(receiver_thread.ident),
            ctypes.py_object(SystemExit))

    os.remove(fifo_checksum_filepath)
    fh_local.close()
    pipe_checksum_read.close()
    pool.terminate()

    if retval == 0 and local_attr_filepath:
        remote_attr_filepath = receiver_result.get('remote_attr_filepath', '')
        status = __set_attributes(configuration,
                                  ssh_options,
                                  local_filepath,
                                  local_attr_filepath,
                                  remote_attr_filepath,
                                  verbose)
        if not status:
            retval = 1
            msg = "Failed to set attributes on %r from %r" \
                % (local_filepath,
                   remote_attr_filepath)
            logger.error(msg)
            if verbose:
                print_stderr("ERROR: %s" % msg)
    t2 = time.time()

    if retval == 0:
        updated_blocks = receiver_result['updated_blocks']
        transfer_time = t2-t1
        filesize_gb = (1.0*local_filesize)/1024**3
        blocksize_gb = (1.0*blocksize*blockcount)/1024**3
        blocks_gb_secs = blocksize_gb / transfer_time
        updated_gb = updated_blocks * blocksize
        updated_gb_secs = updated_gb / transfer_time
        msg = "Total filesize: %d GB, requested blocks (%d): %d-%d" \
            % (filesize_gb, blockcount, offset_block, end_block) \
            + ", Updated: %d blocks (%d GB) in %d secs %f GB/s" \
            % (updated_blocks,
               updated_gb_secs,
               transfer_time,
               blocks_gb_secs)
        logger.info(msg)
        if verbose:
            print(msg)
    else:
        msg = "Failed with exit code: %d, remote_rc: %d in %d secs" \
            % (retval, remote_rc, t2-t1)
        logger.error(msg)
        if verbose:
            print_stderr("ERROR: %s" % msg)

    return retval


if __name__ == "__main__":
    retval = main()
    sys.exit(retval)
