#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# --- BEGIN_HEADER ---
#
# lustrebackup_target - lustre target backup program
# Copyright (C) 2020-2024  The lustrebackup Project by the Science HPC Center at UCPH
#
# This file is part of lustrebackup.
#
# lustrebackup is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# lustrebackup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# -- END_HEADER ---
#

"""Create backup on target side"""

from __future__ import print_function
import sys
import time
import getopt

from lustrebackup.shared.base import print_stderr
from lustrebackup.shared.configuration import get_configuration_object
from lustrebackup.backup.target import backup


def main():
    """Create backup on target side"""
    conf_file = "/etc/lustrebackup.conf"
    verbose = False
    try:
        usage = "USAGE: %s [-h|--help] [-c conf_file|--config=conf_file]" \
            % sys.argv[0] \
            + " [-v|--verbose]"
        opts, args = getopt.getopt(sys.argv[1:], "hvc:l",
                                   ["help", "verbose", "config="])
        for opt, arg in opts:
            if opt in ("-h", "--help"):
                print(usage)
                sys.exit()
            elif opt in ("-v", "--verbose"):
                verbose = True
            elif opt in ("-c", "--config"):
                conf_file = arg

    except Exception as err:
        print_stderr(err)
        print_stderr(usage)
        return 1

    configuration = get_configuration_object(conf_file=conf_file,
                                             verbose=verbose)
    if not configuration:
        print_stderr("Failed to start %r with config: %r"
                     % (sys.argv[0], conf_file))
        sys.exit(1)

    logger = configuration.logger
    msg = "Starting %r with config: %r" \
        % (sys.argv[0], conf_file)
    logger.info(msg)
    if verbose:
        print(msg)

    t1 = time.time()
    status = backup(configuration,
                    verbose=verbose)
    t2 = time.time()

    if status:
        retval = 0
        msg = "Backup finished in %d seconds with status: %s" \
            % ((t2 - t1), status)
        logger.info(msg)
        if verbose:
            print(msg)
    else:
        retval = 1
        msg = "Backup failed in %d seconds with status: %s" \
            % ((t2 - t1), status)
        logger.error(msg)
        if verbose:
            print(msg)

    return retval


if __name__ == "__main__":
    retval = main()
    sys.exit(retval)
