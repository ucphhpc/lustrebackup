#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# --- BEGIN_HEADER ---
#
# lustrebackup_source_filediff - lustre backup source filediff program
# Copyright (C) 2020-2024  The lustrebackup Project by the Science HPC Center at UCPH
#
# This file is part of lustrebackup.
#
# lustrebackup is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# lustrebackup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# -- END_HEADER ---
#

"""This program receives a stream of xxh128 checksums on stdin and
compare these checksums to a local file and streams diff data to the
caller.
NOTE: Files must have same size on source and target
"""

from __future__ import print_function
import os
import sys
import getopt
import tempfile
import traceback
import math
import urllib.parse
import xxhash

from lustrebackup.shared.base import print_stderr
from lustrebackup.shared.configuration import get_configuration_object
from lustrebackup.shared.defaults import tmp_dirname
from lustrebackup.shared.fileio import path_join, makedirs_rec, copyattr


def usage(name=sys.argv[0]):
    """Usage help"""
    print_stderr("""Usage:
%(name)s [OPTIONS]
Where OPTIONS may be one or more of:
    -h|--help                       Show this help
    -v|--verbose                    Verbose output
    -d|--disable-log.               Disable logging
    -a|--attributes                 Preserve file attributes
    -c PATH|--config=PATH           Path to config file
    -n BYTES|--headersize=BYTES     Header size in bytes
                                    source and target must aggree
    -b BYTES|--blocksize=BYTES      Block size in bytes
                                    source and target must be the same
    -o BLOCK|--offset=BLOCK         Block offset (start block number)
    -e BLOCK|--end=BLOCK            End block number
    -s BYTES|--filesize=BYTES       Total filesize in bytes
                                    source and target must aggree
    -f FILEPATH|--filepath=FILEPATH Full path to source file
""" % {'name': name})


def mkattr(configuration, filepath):
    """NOTE: Attr tempfile must reside on lustre to support
    same attr and xattr as original file"""
    logger = configuration.logger

    tmp_filepath = path_join(configuration,
                             configuration.lustre_meta_basepath,
                             tmp_dirname,
                             convert_utf8=False)

    # Create tmp_filepath if it doesn't exists

    if not os.path.exists(tmp_filepath) \
            and not makedirs_rec(configuration,
                                 tmp_filepath):
        msg = "filediff: Failed to create tmp_filepath: %r" \
            % tmp_filepath
        logger.error(msg)
        raise IOError(msg)

    # Create temp file
    # NOTE: temp file must be on lustre to ensure attr / xattr consistency

    (fd, attr_filepath) = tempfile.mkstemp(prefix='filediff.attr.',
                                           dir=tmp_filepath)
    os.close(fd)

    # Copy attributes to temp file

    if not copyattr(configuration, filepath, attr_filepath):
        msg = "filediff: Failed to copy attributes from %r to %r" \
            % (filepath, attr_filepath)
        logger.error(msg)
        raise IOError(msg)

    return attr_filepath


def main():
    """lustre backup send diff"""
    verbose = False
    disable_log = False
    attributes = False
    headersize = 8
    xxh128_checksum_size = 16
    conf_file = "/etc/lustrebackup.conf"
    blocksize = 1024**2
    filesize = -1
    filepath = None
    offset_block = 0
    end_block = 0
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hvdac:n:b:o:e:s:f:",
                                   ["help",
                                    "config=",
                                    "verbose",
                                    "disable-log",
                                    "attributes",
                                    "headersize=",
                                    "blocksize=",
                                    "offset=",
                                    "end=",
                                    "filesize=",
                                    "filepath="])
        for opt, arg in opts:
            if opt in ("-h", "--help"):
                usage()
                return 1
            elif opt in ("-v", "--verbose"):
                verbose = True
            elif opt in ("-d", "--disable-log"):
                disable_log = True
            elif opt in ("-a", "--attributes"):
                attributes = True
            elif opt in ("-c", "--config"):
                conf_file = arg
            elif opt in ("-n", "--headersize"):
                headersize = int(arg)
            elif opt in ("-b", "--blocksize"):
                blocksize = int(arg)
            elif opt in ("-o", "--offset"):
                offset_block = int(arg)
            elif opt in ("-e", "--end"):
                end_block = int(arg)
            elif opt in ("-s", "--filesize"):
                filesize = int(arg)
            elif opt in ("-f", "--filepath"):
                filepath = urllib.parse.unquote(arg)
        if blocksize == -1 or filesize == -1 or filepath is None:
            usage()
            return 1
    except Exception as err:
        print_stderr(err)
        usage()
        return 1

    configuration = get_configuration_object(conf_file=conf_file,
                                             skip_log=disable_log)

    if not configuration:
        print_stderr("Failed to start %r with config: %r"
                     % (sys.argv[0], conf_file))
        return 1

    logger = configuration.logger
    msg = "Starting %r with verbose: %s, disable-log: %s, --attributes: %s" \
        % (sys.argv[0], verbose, disable_log, attributes) \
        + ", config: %r, headersize: %d" \
        % (conf_file, headersize) \
        + ", blocksize: %d, offset: %d, end: %d" \
        % (blocksize, offset_block, end_block) \
        + "filesize: %d, filepath: %r" \
        % (filesize, filepath)
    logger.info(msg)
    if verbose:
        print_stderr(msg)

    if not os.path.isfile(filepath):
        msg = "Missing source file: %s" % filepath
        logger.error(msg)
        if verbose:
            print_stderr("ERROR: %s" % msg)
        return 1

    local_filesize = os.path.getsize(filepath)
    if local_filesize != filesize:
        msg = "%r filesize %d, expected: %d" \
            % (filepath,
               local_filesize,
               filesize)
        if verbose:
            print_stderr(msg)
        return 1

    max_end_block = math.ceil(filesize / blocksize)
    if end_block <= 0:
        end_block = max_end_block
    elif end_block > max_end_block:
        msg = "End block: %d exceeds max end block: %d" \
            % (end_block, max_end_block)
        logger.error(msg)
        if verbose:
            print_stderr("ERROR: %s" % msg)
        return 1

    try:
        xxh128 = xxhash.xxh128()
        max_block_number = (1 << (headersize*8))-1
        max_block_number_raw = max_block_number.to_bytes(
            headersize, sys.byteorder)

        logger.debug("Using offset_block: %d" % offset_block)
        logger.debug("Using end_block: %d" % end_block)
        fh = open(filepath, 'rb')
        fh.seek(offset_block*blocksize)

        for blocknumber in range(offset_block, end_block):
            # logger.debug("Sending block (%d): %d/%d" \
            #     % (blocknumber, offset_block, end_block))
            xxh128.reset()
            blockdata = fh.read(blocksize)
            missing_bytes = blocksize - len(blockdata)
            if missing_bytes > 0 \
                    and blocknumber != max_end_block-1:
                msg = "Missing %d bytes for block %d" \
                    % (missing_bytes, blocknumber)
                logger.error(msg)
                if verbose:
                    print_stderr(msg)
                raise ValueError(msg)
            xxh128.update(blockdata)
            local_checksum = xxh128.digest()
            # logger.debug("blocknumber %d: local checksum (%d): %s" \
            #      % (blocknumber, len(local_checksum), xxh128.digest()))
            missing_bytes = xxh128_checksum_size
            while missing_bytes > 0:
                remote_checksum = sys.stdin.buffer.read(xxh128_checksum_size)
                # logger.debug("Got data: %d" % (len(remote_checksum)))
                missing_bytes = len(remote_checksum) - xxh128_checksum_size
            # logger.debug("blocknumber %d: remote checksum: %s" \
            # % (blocknumber, remote_checksum))
            # blocknumber_raw = blocknumber.to_bytes(headersize, sys.byteorder)
            # sys.stdout.buffer.write(blocknumber_raw)
            # sys.stdout.buffer.write(blockdata)
            # sys.stdout.buffer.flush()

            if local_checksum == remote_checksum:
                # logger.debug("skipping block: %d" % blocknumber)
                sys.stdout.buffer.write(max_block_number_raw)
            else:
                # logger.debug("Checksum differ for block: %d" \
                #    % blocknumber)
                # blocknumber_raw = blocknumber.to_bytes(
                #    headersize, sys.byteorder)
                # logger.debug("Writing header (%d) for block: %d" \
                # % (len(blocknumber_raw), blocknumber))
                sys.stdout.buffer.write(
                    blocknumber.to_bytes(headersize, sys.byteorder))
                # logger.debug("Finished writing header (%d) for block: %d" \
                # % (len(blocknumber_raw), blocknumber))
                # logger.debug("Writing data (%d) for block: %d" \
                #    % (len(blockdata), blocknumber))
                sys.stdout.buffer.write(blockdata)
                # logger.debug("Finished writing data (%d) for block: %d" \
                # % (len(blockdata), blocknumber))

            # Send checksum

            sys.stdout.buffer.write(local_checksum)
            sys.stdout.buffer.flush()
        fh.close()

        if attributes:
            attr_filepath = mkattr(configuration, filepath)
            if not attr_filepath:
                raise IOError("Failed to mkattr: %r" % filepath)
            sys.stdout.write("%s" % attr_filepath)

    except Exception:
        error_trace = traceback.format_exc()
        logger.error(error_trace)
        if verbose:
            print_stderr(error_trace)
        return 1

    return 0


if __name__ == "__main__":
    retval = main()
    sys.exit(retval)
