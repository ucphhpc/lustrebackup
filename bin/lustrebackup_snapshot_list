#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# --- BEGIN_HEADER ---
#
# lustrebackup_snapshot_list - lustre snapshot list program
# Copyright (C) 2020-2024  The lustrebackup Project by the Science HPC Center at UCPH
#
# This file is part of lustrebackup.
#
# lustrebackup is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# lustrebackup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# -- END_HEADER ---
#

"""List snapshots, either fetch new list
or use local snapshot list from last snapshot create"""

from __future__ import print_function

import sys
import getopt

from lustrebackup.shared.base import print_stderr
from lustrebackup.shared.configuration import get_configuration_object
from lustrebackup.snapshot.client import get_snapshots
from lustrebackup.snapshot.mgs import snapshot_list

def usage(name=sys.argv[0]):
    """Usage help"""

    print_stderr("""Usage:
%(name)s [OPTIONS]
Where OPTIONS may be one or more of:
   -h|--help                    Show this help
   -v|--verbose                 Verbose output
   -f|--fetch                   Fetch from MGS
                                otherwise use cached snapshot list 
                                from last snapshot create
   -n NAME|--name=NAME          Snapshot name
                                NOTE: This implies -f|--fetch
   -c PATH|--config=PATH        Path to config file

""" % {'name': name})


def main():
    """List snapshots"""
    conf_file = "/etc/lustrebackup.conf"
    verbose = False
    fetch = False
    snapshot_name = None
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hvfc:n:", [
                                   "help", "verbose", "fetch", "config=", "name="])
        for opt, arg in opts:
            if opt in ("-h", "--help"):
                usage()
                sys.exit()
            elif opt in ("-v", "--verbose"):
                verbose = True
            elif opt in ("-f", "--fetch"):
                fetch = True
            elif opt in ("-c", "--config"):
                conf_file = arg
            elif opt in ("-n", "--name"):
                fetch = True
                snapshot_name = arg

    except Exception as err:
        print_stderr(err)
        usage()
        return 1

    configuration = get_configuration_object(conf_file=conf_file,
                                             verbose=verbose)
    if not configuration:
        print_stderr("ERROR: Failed to start %r with config: %r"
                     % (sys.argv[0], conf_file))
        return 1

    logger = configuration.logger
    msg = "Starting %r with config: %r for %r" \
        % (sys.argv[0], conf_file, configuration.lustre_fsname,)
    logger.info(msg)
    if verbose:
        print_stderr(msg)

    retval = 0
    snapshot_info = ""
    if fetch:
        snapshot_info = snapshot_list(configuration,
                                    snapshot_name=snapshot_name,
                                    verbose=verbose)
        if not snapshot_info:
            retval = 1
    else:
        snapshots = get_snapshots(configuration, verbose=verbose)
        if not snapshots:
            retval = 1
        else:
            sorted_timestamps = sorted(snapshots.keys(), reverse=True)
            for timestamp in sorted_timestamps:
                snapshot_info += \
"""filesystem_name: %(filesystem_name)s
snapshot_name: %(snapshot_name)s
comment: %(comment)s
modify_time: %(modify_time)s
create_time: %(create_time)s
snapshot_fsname: %(snapshot_fsname)s
status: %(status)s

""" % snapshots[timestamp]
    if retval == 0:
        print(snapshot_info)
    else:
        msg = "Failed to list snapshots for %r" % \
            configuration.lustre_fsname
        logger.error(msg)
        if verbose:
            print_stderr("ERROR: %s" % msg)

    return retval


if __name__ == "__main__":
    retval = main()
    sys.exit(retval)
