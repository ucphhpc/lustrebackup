#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# --- BEGIN_HEADER ---
#
# lustrebackup_source_verify_init - lustre backup source verify init program
# Copyright (C) 2020-2024  The lustrebackup Project by the Science HPC Center at UCPH
#
# This file is part of lustrebackup.
#
# lustrebackup is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# lustrebackup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# -- END_HEADER ---
#

"""Print backup source verification to stdout as json
used by backup target verification to fetch source verification information"""

from __future__ import print_function
import sys
import datetime
import getopt

from lustrebackup.shared.base import print_stderr
from lustrebackup.shared.defaults import date_format
from lustrebackup.shared.serial import dumps
from lustrebackup.shared.configuration import get_configuration_object
from lustrebackup.verify.source import init_verify


def usage(name=sys.argv[0]):
    """Usage help"""

    print_stderr("""Usage:
%(name)s [OPTIONS]
Where OPTIONS may be one or more of:
   -h|--help                           Show this help
   -v|--verbose                        Verbose output
   -c PATH|--config=PATH               Path to config file
   -t TIMESTAMP|--timestamp=TIMESTAMP  Snapshot timestamp
""" % {'name': name})


def main():
    """Print backup source verification to stdout as json"""
    conf_file = "/etc/lustrebackup.conf"
    verbose = False
    timestamp = 0
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hvc:t",
                                   ["help",
                                    "verbose",
                                    "config=",
                                    "timestamp="])
        for opt, arg in opts:
            if opt in ("-h", "--help"):
                usage()
                return 1
            elif opt in ("-v", "--verbose"):
                verbose = True
            elif opt in ("-c", "--config"):
                conf_file = arg
            elif opt in ("-t", "--timestamp"):
                timestamp = int(arg)
    except Exception as err:
        print_stderr(err)
        usage()
        return 1

    configuration = get_configuration_object(conf_file=conf_file,
                                             verbose=verbose)
    if not configuration:
        print_stderr("Failed to start %r with config: %r"
                     % (sys.argv[0], conf_file))
        return 1

    snapshot_datestr \
        = datetime.datetime.fromtimestamp(timestamp) \
        .strftime(date_format)
    logger = configuration.logger
    msg = "Starting %r with config: %r for %r" \
        % (sys.argv[0],
           conf_file,
           configuration.lustre_fsname) \
        + " with snapshot timestamp: %d (%s)" \
        % (timestamp,
           snapshot_datestr)

    logger.info(msg)
    if verbose:
        print_stderr(msg)

    result = init_verify(configuration,
                         timestamp,
                         verbose=verbose)
    if result:
        retval = 0
        # Write result to stdout
        print(dumps(result, serializer='json'))
    else:
        retval = 1

    return retval


if __name__ == "__main__":
    init_rc = main()
    sys.exit(init_rc)
