#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# --- BEGIN_HEADER ---
#
# lustrebackup_snapshot_destroy - lustre snapshot destroy program
# Copyright (C) 2020-2024  The lustrebackup Project by the Science HPC Center at UCPH
#
# This file is part of lustrebackup.
#
# lustrebackup is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# lustrebackup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# -- END_HEADER ---
#

"""Destroy snapshot and remove snapshot info"""

from __future__ import print_function

import sys
import getopt

from lustrebackup.shared.base import print_stderr
from lustrebackup.shared.configuration import get_configuration_object
from lustrebackup.snapshot.mgs import destroy_snapshot
from lustrebackup.snapshot.client import get_snapshots, \
    create_snapshots_dict


def usage(name=sys.argv[0]):
    """Usage help"""
    print_stderr("""Usage:
%(name)s [OPTIONS] TIMESTAMP(S)
Where OPTIONS may be one or more of:
   -h|--help                    Show this help
   -v|--verbose                 Verbose output
   -c PATH|--config=PATH        Path to config filewhere TIMESTAMP(s)
                                are one or more timestamps
                                representing the snapshot(s) to umount.
""" % {'name': name})


def main():
    """Destroy snapshot and remove snapshot info"""
    conf_file = "/etc/lustrebackup.conf"
    verbose = False
    timestamps = []
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hvc:t:",
                                ["help",
                                "verbose",
                                "config=",
                                "timestamp="])
        for opt, arg in opts:
            if opt in ("-h", "--help"):
                usage()
                return 1
            elif opt in ("-v", "--verbose"):
                verbose = True
            elif opt in ("-c", "--config"):
                conf_file = arg
            elif opt in ("-t", "--timestamp"):
                timestamps.append(int(arg))
        timestamps = [int(timestamp) for timestamp in args]
        if not timestamps:
            raise ValueError("Missing timestamp(s)")
    except Exception as err:
        print_stderr(err)
        usage()
        return 1

    configuration = get_configuration_object(conf_file=conf_file,
                                             verbose=verbose)
    if not configuration:
        print_stderr("Failed to start %r with config: %r"
                     % (sys.argv[0], conf_file))
        return 1

    logger = configuration.logger
    msg = "Starting %r with config: %r for %r" \
        % (sys.argv[0], conf_file, configuration.lustre_fsname,)
    logger.info(msg)
    if verbose:
        print_stderr(msg)

    # Try to resolve requested snapshots saved list

    sorted_timestamps = sorted(timestamps)
    snapshots = get_snapshots(configuration,
                              before_timestamp=sorted_timestamps[-1]+1,
                              after_timestamp=sorted_timestamps[0]-1)
    if snapshots is None:
        snapshots = {}
    missing_timestamps = [timestamp for timestamp in timestamps
                          if timestamp not in snapshots.keys()]
    # Fetch snapshots from MGS
    if missing_timestamps:
        mgs_snapshots = create_snapshots_dict(configuration)
        snapshots.update(mgs_snapshots)
        missing_timestamps = [timestamp for timestamp in timestamps
                                  if timestamp not in snapshots.keys()]
    if missing_timestamps:
        msg = "Found no lustre: %r snapshot(s) with timestamp(s): %s" \
            % (configuration.lustre_fsname,
               missing_timestamps)
        logger.error(msg)
        if verbose:
            print_stderr("ERROR: %s" % msg)
        return 1

    retval = 0
    destroyed_snapshots = []
    failed_destroy = []
    for timestamp, snapshot in snapshots.items():
        if timestamp not in sorted_timestamps:
            logger.debug("Skipping non-requested snapshot: %d"
                         % timestamp)
            continue
        snapshot_name = snapshot.get('snapshot_name', '')
        status = destroy_snapshot(configuration,
                   snapshot_name,
                   verbose=verbose)
        if status:
            destroyed_snapshots.append(snapshot_name)
        else:
            failed_destroy.append(snapshot_name)
            retval = 1

    if destroyed_snapshots:
        msg = "Destroyed snapshot(s): %s" % destroyed_snapshots
        logger.info(msg)
        if verbose:
            print_stderr(msg)

    if failed_destroy:
        msg = "Failed to destroy snapshot(s): %s" \
            % failed_destroy
        logger.error(msg)
        if verbose:
            print_stderr("ERROR: %s" % msg)

    return retval


if __name__ == "__main__":
    retval = main()
    sys.exit(retval)
