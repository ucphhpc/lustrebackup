#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# --- BEGIN_HEADER ---
#
# lustrebackup_snapshot_destroy - lustre snapshot destroy program
# Copyright (C) 2020-2025  The lustrebackup Project by the Science HPC Center at UCPH
#
# This file is part of lustrebackup.
#
# lustrebackup is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# lustrebackup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# -- END_HEADER ---
#

"""Destroy snapshot and remove snapshot info"""

from __future__ import print_function

import sys
import getopt

from lustrebackup.shared.base import print_stderr
from lustrebackup.shared.defaults import snapshot_name_format
from lustrebackup.shared.configuration import get_configuration_object
from lustrebackup.shared.snapshot import destroy_snapshot


def usage(name=sys.argv[0]):
    """Usage help"""
    print_stderr("""Usage:
%(name)s [OPTIONS]
Where OPTIONS may be one or more of:
   -h|--help                            Show this help
   -v|--verbose                         Verbose output
   -c PATH|--config=PATH                Path to config filewhere TIMESTAMP(s)
                                        are one or more timestamps
                                        representing the snapshot(s) to umount.
   -n NAME|--name=NAME                  Snapshot Name
   -t TIMESTAMP|--timestamp=TIMESTAMP   Snapshot Timestamp
""" % {'name': name})


def main():
    """Destroy snapshot and remove snapshot info"""
    conf_file = "/etc/lustrebackup.conf"
    verbose = False
    retval = 0
    snapshot_timestamp = None
    snapshot_name = None
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hvc:n:t:",
                                   ["help",
                                    "verbose",
                                    "config=",
                                    "name=",
                                    "timestamp="])
        for opt, arg in opts:
            if opt in ("-h", "--help"):
                usage()
                return 1
            elif opt in ("-v", "--verbose"):
                verbose = True
            elif opt in ("-c", "--config"):
                conf_file = arg
            elif opt in ("-n", "--name"):
                snapshot_name = arg
            elif opt in ("-t", "--timestamp"):
                snapshot_timestamp = int(arg)
    except Exception as err:
        print_stderr(err)
        usage()
        return 1

    configuration = get_configuration_object(conf_file=conf_file,
                                             verbose=verbose)
    if not configuration:
        print_stderr("Failed to start %r with config: %r"
                     % (sys.argv[0], conf_file))
        return 1

    logger = configuration.logger
    msg = "Starting %r with config: %r for %r" \
        % (sys.argv[0], conf_file, configuration.lustre_fsname,)
    logger.info(msg)
    if verbose:
        print_stderr(msg)
    # NOTE: snapshot_name precede snapshot_timestamp
    if snapshot_name and snapshot_timestamp:
        snapshot_timestamp = None
    if snapshot_timestamp:
        msg = "Using snapshot_timestamp: %d" % snapshot_timestamp
        logger.info(msg)
        if verbose:
            print_stderr(msg)
        # Resolve snapshot_name from snapshot_timestamp
        snapshot_name = snapshot_name_format \
            % {'fsname': configuration.lustre_fsname,
               'timestamp': snapshot_timestamp}
    if snapshot_name:
        msg = "Using snapshot_name: %r" % snapshot_name
        logger.info(msg)
        if verbose:
            print_stderr(msg)

    # Destroy snapshot

    status = destroy_snapshot(configuration,
                              snapshot_name,
                              verbose=verbose)
    if status:
        msg = "Destroyed snapshot: %r" % snapshot_name
        logger.info(msg)
        if verbose:
            print_stderr(msg)
    else:
        retval = 1
        msg = "Failed to destroy snapshot: %r" % snapshot_name
        logger.error(msg)
        if verbose:
            print_stderr("ERROR: %s" % msg)

    return retval


if __name__ == "__main__":
    retval = main()
    sys.exit(retval)
