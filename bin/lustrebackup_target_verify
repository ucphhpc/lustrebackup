#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# --- BEGIN_HEADER ---
#
# lustrebackup_target_verify - lustre target verify program
# Copyright (C) 2020-2024  The lustrebackup Project by the Science HPC Center at UCPH
#
# This file is part of lustrebackup.
#
# lustrebackup is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# lustrebackup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# -- END_HEADER ---
#

"""Verify backup target data"""

from __future__ import print_function

import sys
import time
import datetime
import getopt

from lustrebackup.shared.base import print_stderr
from lustrebackup.shared.defaults import date_format
from lustrebackup.shared.configuration import get_configuration_object
from lustrebackup.verify.target import verify, list_verify


def usage(name=sys.argv[0]):
    """Usage help"""

    print_stderr("""Usage:
%(name)s [OPTIONS]
Where OPTIONS may be one or more of:
   -h|--help                       Show this help
   -v|--verbose                    Verbose output
   -r|--resume                     Resume checkpoint if it exists
   -c PATH|--config=PATH           Path to config file
   -s TIMESTAMP|--start=TIMESTAMP  Start source snapshot timestamp
   -e TIMESTAMP|--end=TIMESTAMP    End source snapshot timestamp
   -t TIMESTAMP|--target=TIMESTMAP Target snapshot timestamp
""" % {'name': name})


def main():
    """Verify backup target data"""
    conf_file = "/etc/lustrebackup.conf"
    verbose = False
    resume = False
    start_timestamp = 0
    end_timestamp = 0
    target_timestamp = 0
    verify_timestamps = []
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hvrc:s:e:t:",
                                   ["help",
                                    "verbose",
                                    "resume",
                                    "config=",
                                    "start=",
                                    "end=",
                                    "target="])
        for opt, arg in opts:
            if opt in ("-h", "--help"):
                usage()
                return 1
            elif opt in ("-v", "--verbose"):
                verbose = True
            elif opt in ("-r", "--resume"):
                resume = True
            elif opt in ("-c", "--config"):
                conf_file = arg
            elif opt in ("-s", "--start"):
                start_timestamp = int(arg)
            elif opt in ("-e", "--end"):
                end_timestamp = int(arg)
            elif opt in ("-t", "--target"):
                target_timestamp = int(arg)
    except Exception as err:
        print_stderr(err)
        usage()
        return 1

    configuration = get_configuration_object(conf_file=conf_file,
                                             verbose=verbose)
    if not configuration:
        print_stderr("ERROR: Failed to start %r with config: %r"
                     % (sys.argv[0], conf_file))
        return 1

    logger = configuration.logger
    msg = "Starting %r with config: %r for %r" \
        % (sys.argv[0], conf_file, configuration.lustre_fsname,)
    logger.info(msg)
    if verbose:
        print_stderr(msg)

    retval = 0
    total_t1 = time.time()

    # Fetch verification list from source
    source_verify = list_verify(configuration,
                                start_timestamp,
                                end_timestamp)
    if not source_verify:
        retval = 1
        msg = "Failed to fetch verifications from source"
        logger.error(msg)
        if verbose:
            print_stderr("ERROR: %s" % msg)
    else:
        verify_timestamps = source_verify.get('verify_timestamps', [])
        source_start_timestamp = source_verify.get('start_timestamp', 0)
        source_end_timestamp = source_verify.get('end_timestamp', 0)
        source_start_datestr = datetime.datetime \
            .fromtimestamp(source_start_timestamp) \
            .strftime(date_format)
        source_end_datestr = datetime.datetime \
            .fromtimestamp(source_end_timestamp) \
            .strftime(date_format)
        msg = "Verifying %d source snapshot(s), first: %d (%s)" \
            % (len(verify_timestamps),
                source_start_timestamp,
                source_start_datestr) \
            + ", last: %d (%s)" \
            % (source_end_timestamp,
               source_end_datestr)
        logger.info(msg)
        if verbose:
            print_stderr(msg)
        for timestamp in verify_timestamps:
            t1 = time.time()
            status = verify(configuration,
                            timestamp,
                            target_timestamp=target_timestamp,
                            resume=resume,
                            verbose=verbose)
            t2 = time.time()
            timestamp_datestr = datetime.datetime.fromtimestamp(timestamp) \
                .strftime(date_format)
            msg = "verified source: %d (%s) in %d seconds, status: %s" \
                % (timestamp,
                   timestamp_datestr,
                   (t2 - t1),
                    status)
            logger.info(msg)
            if verbose:
                print_stderr(msg)
            if not status:
                retval = 1
    total_t2 = time.time()

    if retval == 0:
        msg = "Backup target verify of %d entries finished in %d seconds" \
            % (len(verify_timestamps),
               (total_t2 - total_t1))
        logger.info(msg)
        if verbose:
            print_stderr(msg)
    else:
        msg = "Backup target verify of %d entries failed in %d seconds" \
            % (len(verify_timestamps), (total_t2 - total_t1))
        logger.error(msg)
        if verbose:
            print_stderr(msg)

    return retval


if __name__ == "__main__":
    retval = main()
    sys.exit(retval)
